# -*- coding: utf-8 -*-

import re
from cards import io
from contribution import Contribution
from gensim.models import Word2Vec
import warnings

warnings.filterwarnings("ignore")



class Move(object):
    
    """
    A player makes a move by selecting a contribution, at this stage implemented as a selection 
    of the most humorous contribution possible (based on what the player has said in the past).
    The most humorous contribution is currently based on maximising similarity of quoter and player
    contexts, while minimising similarity of quoter and player fillers.
    
    NB. there is a re-training option, whereby the current model can be retrained with the player's
    own sentences, thereby avoiding problems of sparsity (e.g. Adam Sandler utters the following
    unique sentences: "Here comes Hannukah, So much funnukah, To celebrate Hannukah"). 
    Best results seem to be with this option set to `True`.
    
    TODO -- currently ignoring warnings: 
        At the moment, using the medium-sized model (which is faster) evokes this warning:
        
        "/botsvsquotes/gensim/models/word2vec.py:456: UserWarning: C extension compilation failed, 
        training will be slow. Install a C compiler and reinstall gensim for fast training.
        warnings.warn("C extension compilation failed, training will be slow. 
        Install a C compiler and reinstall gensim for fast training.")"
        
        This (& so all other) warnings are currently being ignored.
    
    Details:
    :param path_to_traind_model: The path to the trained model to be used by Word2Vec.
    :type path_to_traind_model: str.
    :param qtr_context: The context used by the quoter.
    :type qtr_context: str.
    :param qtr_filler: The filler used by the quoter.
    :type qtr_filler: str.
    :param plyr_name: The name of the player.
    :type plyr_name: str.
    :param path_to_cards: The path to the cards data.
    :type path_to_cards: str.
    :param retraining: A boolean flag, for whether to retrain the model based 
                       on the player's data (default is `False`).
                       [NB. This is a strategy for dealing with data sparsity, 
                       see the function `Move.load_model` below.]
    :type retraining: boolean.
    
    For example:
    > player_name = "Al Capone"
    > cards_data = "/path/to/cards/data"
    > quoter_dict = {"name": "Darth Vader","context":"Don't underestimate the power of _","filler":"the Force"}
    > import os.path
    > model_path = path.join("/path/to/model","w2v_103.model")
    > move = Move(model_path, quoter_dict["context"], quoter_dict["filler"], player_name, cards_data, retraining=True)
    > move.make_move()
    """

    def __init__(self, path_to_traind_model, qt_context, qt_filler, plyr_name, path_to_cards, retraining=False):

        self.quote_context = qt_context
        self.quote_filler = qt_filler
        self.player_name = plyr_name
        self.player_cards = io.load_character_cards(self.player_name, path=path_to_cards)
        self.black_cards_list = [
                                 c.black_string() 
                                 for c in self.player_cards
                                 ]
        self.white_cards_list = [
                                 c.white_string() 
                                 for c in self.player_cards
                                 ]
        self.data_set = zip(
                            self.black_cards_list, 
                            self.white_cards_list
                            )
        self.trained_model = self.load_model(path_to_traind_model, retraining)

    
    def load_model(self, path_to_model, retraining):
        
        traind_model = Word2Vec.load(path_to_model)

        if retraining:
        
            # Taking care of sparse data problems, by retraining model to include sentences from player's data set.
            #
            ## Warning from http://radimrehurek.com/2014/02/word2vec-tutorial/:
            ## "Note that itâ€™s not possible to resume training with models generated by the C tool, 
            ## load_word2vec_format(). You can still use them for querying/similarity, but information 
            ## vital for training (the vocab tree) is missing there." 
            #
            # 1. Construct list of sentences
            data_set_sentences_list = [
                                   re.compile("[.!?]").split(re.sub("_+", j, i))
                                   for i,j in self.data_set
                                  ]
            # 2. Flatten this list, and remove duplicates    
            data_set_sentences_list[:] = list(
                                                   set(
                                                       l.strip().lower() 
                                                       for lst in data_set_sentences_list 
                                                       for l in lst if l
                                                       )
                                                   )
            # 3. Retrain model to include player's sentences
            traind_model.train(data_set_sentences_list)
        
        return traind_model

            
    def make_move(self):
        
        # Collect scores for player's contributions vs. quoter's context and filler

        contrs = Contribution(
                              self.trained_model, 
                              self.quote_context, 
                              self.quote_filler, 
                              self.player_name, 
                              self.data_set
                              )

        return contrs.humourise(contrs.score_contributions())
 


if __name__ == '__main__':

    from os import path

    #player_type = "fictional"
    #quoter_type = "real"
    player_name = "Albert Einstein"
    cards_data = "E:\\Dropbox\\Code\\eclipse-workspace-luna\\botsvsquotes\\cards\\data\\"
    quote_dict = {
              "name": "Darth Vader",
              "context":"Don't underestimate the power of _", 
              "filler":"the Force"}

    trained_medium_model_path = path.join("E:\Dropbox\Data\WordVecModels","w2v_103.model")
    
    move = Move(
                trained_medium_model_path, 
                quote_dict["context"], 
                quote_dict["filler"], 
                player_name, 
                cards_data, 
                retraining=True
                )

    print quote_dict["name"],"poses the quote:",quote_dict["context"]
    print player_name,"replies with:",move.make_move()

